# -*- coding: utf-8 -*-
"""Churn_Analysis using Artificial_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gL7qN-XU4J72rVTt0SGgZu7Ax8S5oXBt

# Churn Analysis using Artificial Neural Network

We are having the dataset of the bank for the 10000 customers. The Bank is seeing the unsual Churn rate. In the 'Excited' Column there are 2 variables i.e., 1(Churn customer) and 0(non-churn customer).
Your objective is to tell which of the customer is at higher risk of leaving.

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:,3:-1].values
y = dataset.iloc[:,-1].values

"""### Importing the dataset"""

print(X)

print(y)

"""### Encoding categorical data

Label Encoding the "Gender" column
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:, 2] = le.fit_transform(X[:, 2])

print(X)

"""One Hot Encoding the "Geography" column"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [1])], remainder = 'passthrough')
X = np.array(ct.fit_transform(X))

print(X)

X[0]

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test  =train_test_split(X, y, test_size = 0.2, random_state = 0)

"""### Feature Scaling"""

#apply feature scaling for all the features as it is important for the Deep Learning
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)

X_train, X_test

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

#instance of the ANN sequential Class
ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

#using dense class for to add a fully connected layer to an ANN
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))

"""### Adding the second hidden layer"""

#using dense class for to add a fully connected layer to an ANN
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))

"""### Adding the output layer"""

#at output layer we use sigmoid function
ann.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer='adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""### Training the ANN on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

Use our ANN model to predict if the customer with the following informations will leave the bank: 

Geography: France

Credit Score: 600

Gender: Male

Age: 40 years old

Tenure: 3 years

Balance: \$ 60000

Number of Products: 2

Does this customer have a credit card ? Yes

Is this customer an Active Member: Yes

Estimated Salary: \$ 50000

So, should we say goodbye to that customer ?

**Solution**
"""

print(ann.predict(ss.transform([[1.0, 0.0, 1,1,0.0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])))

print(ann.predict(ss.transform([[1.0, 0.0, 1,1,0.0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])) > 0.5)
#0.5 is the threshold value for customer leaving the bank

"""Therefore, our ANN model predicts that this customer stays in the bank!

**Important note 1:** Notice that the values of the features were all input in a double pair of square brackets. That's because the "predict" method always expects a 2D array as the format of its inputs. And putting our values into a double pair of square brackets makes the input exactly a 2D array.

**Important note 2:** Notice also that the "France" country was not input as a string in the last column but as "1, 0, 1, 1, 0" in the first five columns. That's because of course the predict method expects the one-hot-encoded values of the state, and as we see in the first row of the matrix of features X, "France" was encoded as "1, 0, 1, 1 0". And be careful to include these values in the first three columns, because the dummy variables are always created in the first columns.

### Predicting the Test set results
"""

y_pred = ann.predict(X_test)
y_pred = (y_pred>0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_pred, y_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy*100}%\nConfusion matrix: \n{cm}")

